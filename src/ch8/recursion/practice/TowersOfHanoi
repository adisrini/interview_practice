package ch8.recursion.practice;

public class TowersOfHanoi {

	class Tower {
		Stack<Integer> disks;
		int index;
		
		Tower(int index) {
			this.index = index;
		}
		
		void add(int i) {
			if(!disks.isEmpty() && disks.peek() <= i) {
				throw new UnsupportedOperationException();
			} else {
				disks.push(i);
			}
		}
		
		void moveTopTo(Tower destination) {
			if(!disks.isEmpty()) {
				int top = disks.pop();
				destination.add(top);
			}
		}
		
		void moveToDestination(int n, Tower destination, Tower buffer) {
			if(n <= 0) {
				return;
			}
			moveToDestination(n - 1, buffer, destination);
			moveTopTo(destination);
			buffer.moveToDestination(destination, this);
		}
	
	}
	
	public static void main(String[] args) {
		int n = 3;
		Tower[] towers = new Tower[n];
		
		for(int i = 0; i < n; i++) {
			towers[i] = new Tower(i);
		}
		
		for(int x = n; x > 0; x--) {
			towers[0].add(x);
		}
		
		
	}

}
