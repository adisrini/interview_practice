package ch8.recursion.practice;

/**
 * A child is running up a staircase with n steps and can hop either 1 step, 2 steps, or 3 steps at a time.
 * Implement a method to count how many possible ways the child can run up the stairs.
 *  
 * @author Aditya Srinivasan
 *
 */
public class TripleStep {

	//
	// This is a question of combinations and permutations. We are trying to find how many ways n can be decomposed
	// into a sum of 1, 2, and 3.
	//
	// We start off with n = 0, if this is the case, there are no ways that the child can run up the stairs so we return 0
	// For n = 1, there is only one way the child can run up the stairs: if they take 1 step, so we return 1
	// For n = 2, there are two ways: 1 + 1, or 2, so we return 2
	// For n = 3, there are four ways: 1 + 1 + 1, 2 + 1, 1 + 2, or 3, so we return 4
	// and so on...
	// 
	
	private int count = 0;

	public static void possibleWays(int n) {
		if(n == 1) {
			count++;
			return 0;
		}
		if(n <= 0) return 0;
		count++;
		possibleWays(n - 1);
		possibleWays(n - 2);
		possibleWays(n - 3);
		return count;
	}
	
	// So let's run through with some test cases
	//
	// n = 0, count = 0
	// n = 1, count = 1
	// n = 2, calls possibleWays(1), possibleWays(0), possibleWays(-1), count = 2
	// n = 3, c++, calls pw(2) c++, pw(1) c++, pw(0), pw(2) calls p(1) c++, pw(0), pw(-1), count = 4

}
